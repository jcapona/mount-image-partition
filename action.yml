name: Mount Image Partition
description: An action that mounts an image partition inside a Ubuntu runner.
author: Jorge Capona

branding:
  icon: file
  color: blue

inputs:
  imagePath:
    description: "Path to image file."
    required: true
  mountPoint:
    description: "Mount point. Defaults to '/mnt/'."
    required: false
    default: "/mnt/"
  partitionIndex:
    description: "Partition index in image, starting from 1. Defaults to 1."
    required: false
    default: "1"
  extraDiskSpace:
    description: "Extra disk space to add to the partition in MiB. Defaults to 0 MiB."
    required: false
    default: "0"

outputs:
  loopbackDevice:
    description: "Loopback device associated to mounted partition."
    value: ${{ steps.mount-image.outputs.loopbackDevice }}
  imagePath:
    description: "Path to mounted image. Might be different to the input image path if extra disk space was added."
    value: ${{ steps.mount-image.outputs.imagePath }}

runs:
  using: "composite"
  steps:
    - id: mount-image
      shell: bash
      run: |
        originalImagePath=${{ inputs.imagePath }}
        mountPoint=${{ inputs.mountPoint }}
        partitionIndex=${{ inputs.partitionIndex }}
        extraDiskSpace=${{ inputs.extraDiskSpace }}
        export PATH=$PATH:/sbin

        [ -f $originalImagePath ] || echo 1>&2 "ERROR: image file not found at $originalImagePath"
        [ "$partitionIndex" -ge 1 ] || echo 1>&2 "ERROR: partition index must be greater than or equal to 1"
        [ "$extraDiskSpace" -ge 0 ] || echo 1>&2 "ERROR: extra disk space must be greater than or equal to 0"

        imagePath=$originalImagePath
        if [ "${extraDiskSpace}" -ne 0 ]; then
          # If extra disk space will be added, copy the image file to a temporary location
          # to avoid modifying the original file
          imagePath=$(mktemp -d)/image.img
          echo "Copying image file from ${originalImagePath} to ${imagePath}"
          cp "${originalImagePath}" "${imagePath}"
        fi

        echo "Partitions in image file:"
        fdisk -l $imagePath

        sectorSize=$(fdisk -l $imagePath | grep "Sector size" | awk '{print $4}')
        echo "Sector size: ${sectorSize}"

        partitionData=$(sudo fdisk -l $imagePath | grep -E "^$imagePath[0-9]"  | sed -n "${partitionIndex}p")
        echo "Partition data: ${partitionData}"

        startOffset=$(echo $partitionData | awk '{print $2}')
        startOffsetBytes=$((sectorSize * startOffset))
        echo "Start offset: $startOffset; $startOffsetBytes bytes"

        if [ "${extraDiskSpace}" -ne 0 ]; then
          echo "Appending "${extraDiskSpace}" MiB of empty space to the partition"
          dd if=/dev/zero bs=1MiB of="${imagePath}" conv=notrunc oflag=append seek="${startOffset}" count="${extraDiskSpace}"
        fi

        echo "Attempting to mount partition ${partitionIndex} of ${imagePath} in ${mountPoint}"

        sudo mkdir -p "${mountPoint}" || echo 1>&2 "ERROR: could not create the partition's mount directory $mountPoint"
        sudo mount -o loop,offset="${startOffsetBytes}" "${imagePath}" "${mountPoint}" || echo 1>&2 "ERROR: could not mount device to $mountPoint"

        loopbackDevice=$(sudo losetup -j "${imagePath}" | awk -F: '{print $1}')
        echo "Associated loopback device: ${loopbackDevice}"

        if [ "${extraDiskSpace}" -ne 0 ]; then
          echo "Before resizing partition:"
          df -h "${mountPoint}" | sed -e "s#$(pwd)/##" || echo 1>&2 "ERROR: could not inspect mounted partition at $mountPoint"

          sudo losetup -c "${loopbackDevice}" || echo 1>&2 "ERROR: could not update loopback device ${loopbackDevice}"
          sudo resize2fs "${loopbackDevice}" || echo 1>&2 "ERROR: could not resize filesystem on ${loopbackDevice}"
        fi

        echo "Mounted Image Details:"
        df -h "${mountPoint}" | sed -e "s#$(pwd)/##" || echo 1>&2 "ERROR: could not inspect mounted partition at $mountPoint"

        echo "Filesystem in ${mountPoint}:"
        ls -hla "${mountPoint}"

        echo "loopbackDevice=$loopbackDevice" >> $GITHUB_OUTPUT
        echo "imagePath=$imagePath" >> $GITHUB_OUTPUT
